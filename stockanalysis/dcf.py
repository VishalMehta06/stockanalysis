# Third Party Imports
import pandas
import xlwings

# Local Imports
import stockanalysis as sa

def single_dcf(ticker: str, results_fname: str = None, terminal_growth_rate: float = None, 
			min_discount_rate: float = 0.05, risk_free_rate: float = 0.047, market_return: float = 0.08, 
			default_beta: float = 1.3) -> pandas.DataFrame:
	"""
	Complete a DCF for one ticker and save it to an excel file.

	:param ticker: A string containing the ticker of the company.
	:param result_fname: The Excel file name where the DCF will be saved. Must end in .xlsx. If None, it is not 
		saved to an Excel sheet.
	:param terminal_growth_rate: The terminal growth rate used in the DCF. If None, autogenerated rate will be used.
	:param min_discount_rate: The minimum discount rate allowed.
	:param risk_free_rate: The risk free rate assumed. Generally return of US Treasury for desired 
		time period.
	:param market_return: The expected return for the market subset that is being analyzed.
	:param default_beta: The beta to use if no 5 Year beta is available on stockanalysis.com.
	:return pandas.DataFrame: The DCF will be returned.
	"""
	if terminal_growth_rate:
		stock = sa.Stock(ticker, terminal_growth_rate, min_discount_rate, risk_free_rate, market_return, default_beta)
		stock.gen_dcf(auto_terminal_growth_rate=False)
	else:
		stock = sa.Stock(ticker, min_discount_rate=min_discount_rate, risk_free_rate=risk_free_rate, 
				   		 market_return=market_return, default_beta=default_beta)
		stock.gen_dcf()

	if results_fname:
		results_fname = "results/" + results_fname
		sa.create_workbook(results_fname, ticker.upper())

		with xlwings.App(visible=False) as app:
			wb = app.books.open(results_fname)
			wb.sheets(ticker.upper()).range("A1").value = stock.dcf
			wb.sheets(ticker.upper()).range('B1', 'Z100').api.HorizontalAlignment = xlwings.constants.HAlign.xlHAlignCenter
			wb.sheets(ticker.upper()).range('A1', 'A100').api.HorizontalAlignment = xlwings.constants.HAlign.xlHAlignLeft
			wb.sheets(ticker.upper()).range('A1', 'L1').font.bold = True
			wb.sheets(ticker.upper()).range('A1', 'A100').font.bold = True
			wb.sheets(ticker.upper()).range('L20', 'L21').font.bold = True
			wb.sheets(ticker.upper()).range('A1', 'Z100').autofit()
			wb.save()
	return stock.dcf


def multi_dcf(tickers: list[str], results_fname: str = None, sort: bool = True) -> pandas.DataFrame:
	"""
	Complete a Discounted Cash Flow for each ticker in tickers. Each stock will have their own DCF appear in a 
		separate sheet in the same file. There will also be a summary page containing the highlights of the 
		results of each stock.
	
	A confirmation is printed for each stock completed and error messages for each stock incomplete.

	:param tickers: This list of strings contains all tickers that will be evaluated.
	:param results_fname: The file name of the results excel sheet. Must end with .xlsx. If None, results will not be 
		saved in an Excel sheet.
	:param sort: True = Sort the results A-Z both on the Summary and individual stock sheets. 
		False = Order of tickers is maintained as provided.
	:return pandas.DataFrame: The Summary sheet with the ticker, discount rate, terminal growth rate, and margin of 
		safety will be returned. Individual DCFs are only accessible from an Excel file if results_fname is provided.
	"""
	df = pandas.DataFrame(columns=["#", "Ticker", "Price", "Discount Rate", "Terminal Growth Rate", "Margin"])

	if results_fname:
		results_fname = "results/" + results_fname
		with xlwings.App(visible=False) as app:
			try:
				wb = app.books.open(results_fname)
				current_sheets = [sheet.name for sheet in wb.sheets]
			except:
				sa.create_workbook(results_fname, "Summary")
				wb = app.books.open(results_fname)
				current_sheets = [sheet.name for sheet in wb.sheets]

	if sort:
		tickers.sort()

	count = 1
	for i in range(len(tickers)):
		ticker = tickers[i]
		stock = sa.Stock(ticker)
		try:
			stock.gen_dcf()
			df.loc[i] = [count, ticker.upper(), "$"+str(stock.price), str(stock.discount_rate*100)+"%", str(stock.terminal_growth_rate*100)+"%", stock.dcf_margin]

			if results_fname:
				with xlwings.App(visible=False) as app:
					wb = app.books.open(results_fname)
					if ticker.upper() in current_sheets:
						wb.sheets(ticker.upper()).range("A1").value = stock.dcf
					else:
						new_sheet = wb.sheets.add(after=wb.sheets.count)
						new_sheet.range("A1").value = stock.dcf
						new_sheet.name = ticker.upper()
					wb.sheets(ticker.upper()).range('B1', 'Z100').api.HorizontalAlignment = xlwings.constants.HAlign.xlHAlignCenter
					wb.sheets(ticker.upper()).range('A1', 'A100').api.HorizontalAlignment = xlwings.constants.HAlign.xlHAlignLeft
					wb.sheets(ticker.upper()).range('A1', 'L1').font.bold = True
					wb.sheets(ticker.upper()).range('A1', 'A100').font.bold = True
					wb.sheets(ticker.upper()).range('L20', 'L21').font.bold = True
					wb.sheets(ticker.upper()).range('A1', 'Z100').autofit()
					wb.save()
			count += 1
			print(f"[*] {ticker.upper()} is Complete")
		except:
			print(f"~~ An Error Has Occurred, {ticker.upper()} Unavailable ~~")

	df = df.set_index("#")
	if results_fname:
		with xlwings.App(visible=False) as app:
			wb = app.books.open(results_fname)
			if "Summary" in current_sheets:
				wb.sheets("Summary").range("A1").value = df
			else:
				new_sheet = wb.sheets.add(before=wb.sheets[0])
				new_sheet.range("A1").value = df
				new_sheet.name = "Summary"
			wb.sheets[0].range('A1', 'Z1000').api.HorizontalAlignment = xlwings.constants.HAlign.xlHAlignCenter
			wb.sheets[0].range('A1', 'F1').font.bold = True
			wb.sheets[0].range('A1', 'Z1000').autofit()
			wb.save()

	return df
